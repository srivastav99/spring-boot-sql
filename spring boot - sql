                                                                implementation of this class:
@Entity
public class Company {

	// Primary ID which increments
	// automatically when new entry
	// is added into the database
	@Id
	@GeneratedValue(strategy
					= GenerationType.AUTO)
	int id;

	String name;

	// In months
	int duration;
	String profile;

	// Can be 0
	int stipend;
	boolean workFromHome;

	public Company()
	{
	}

	// Parameterized constructor
	public Company(String name, int duration,
				String profile,
				int stipend,
				boolean workFromHome)
	{
		this.name = name;
		this.duration = duration;
		this.profile = profile;
		this.stipend = stipend;
		this.workFromHome = workFromHome;
	}

	// Getters and setters of
	// the variables
	public int getId()
	{
		return id;
	}

	public String getName()
	{
		return name;
	}

	public int getDuration()
	{
		return duration;
	}

	public String getProfile()
	{
		return profile;
	}

	public int getStipend()
	{
		return stipend;
	}

	public void setId(int id)
	{
		this.id = id;
	}

	public boolean isWorkFromHome()
	{
		return workFromHome;
	}
  
                                                           creating REST APIs(GET, POST, PUT, DELETE)
                                                           

@RestController
public class CompanyController {
	@Autowired
	private CompanyRepository repo;

	// Home Page
	@GetMapping("/")
	public String welcome()
	{
		return "<html><body>"
			+ "<h1>WELCOME</h1>"
			+ "</body></html>";
	}

	// Get All Notes
	@GetMapping("/company")
	public List<Company> getAllNotes()
	{
		return repo.findAll();
	}

	// Get the company details by
	// ID
	@GetMapping("/company/{id}")
	public Company getCompanyById(
		@PathVariable(value = "id") int id)
	{
		return repo.findById(id);
	}

	@PostMapping("/company")
	@ResponseStatus(HttpStatus.CREATED)
	public Company addCompany(
		@RequestBody Company company)
	{
		return repo.save(company);
	}

	@DeleteMapping("/delete/{id}")
	public void deleteStudent(
		@PathVariable(value = "id") int id)
	{
		repo.deleteById(id);
	}

	@PutMapping("/company/{id}")
	public ResponseEntity<Object> updateStudent(
		@RequestBody Company company,
		@PathVariable int id)
	{

		Optional<Company> companyRepo
			= Optional.ofNullable(
				repo.findById(id));

		if (!companyRepo.isPresent())
			return ResponseEntity
				.notFound()
				.build();

		company.setId(id);

		repo.save(company);

		return ResponseEntity
			.noContent()
			.build();
	}

                                                                 Integrating with SQL
                                                                 
spring.datasource.url=jdbc:mysql://localhost:3306/database_name
spring.datasource.username=username
spring.datasource.password=password
spring.jpa.hibernate.ddl-auto=update                                                               
